/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.jme3.gde.assetbrowser.widgets;

import com.jme3.gde.assetbrowser.dnd.AssetPreviewPopupMenu;
import com.jme3.gde.assetbrowser.dnd.AssetPreviewWidgetMouseListener;
import com.jme3.gde.core.dnd.AssetGrabHandler;
import com.jme3.gde.core.icons.IconList;
import com.jme3.gde.core.scene.PreviewRequest;
import com.jme3.gde.core.scene.SceneListener;
import com.jme3.gde.core.scene.SceneRequest;
import com.jme3.gde.core.dnd.AssetNameHolder;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Action;
import javax.swing.Icon;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;

/**
 * Displays an asset as an image in the AssetBrowser
 * @author rickard
 */
public class AssetPreviewWidget extends javax.swing.JPanel implements SceneListener, AssetNameHolder, ActionListener {

    private boolean editable;
    private PreviewInteractionListener listener;
    /**
     * Creates new form AssetPreviewWidget
     */
    public AssetPreviewWidget() {
        initComponents();
    }
    
    public AssetPreviewWidget(PreviewInteractionListener listener) {
        this();
        this.listener = listener;
        final var mouseListener = new AssetPreviewWidgetMouseListener(this, listener);
        addMouseListener(mouseListener);
        addMouseMotionListener(mouseListener);
        setComponentPopupMenu(new AssetPreviewPopupMenu(this));
    }

    public void setPreviewImage(Icon icon) {
        assetPreviewLabel.setIcon(icon);
    }

    public void setPreviewName(String name) {
        assetNameLabel.setText(name);
    }
    
    public String getPreviewName() {
        return assetNameLabel.getText();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        assetNameLabel = new javax.swing.JLabel();
        assetPreviewLabel = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(170, 180));
        setPreferredSize(new java.awt.Dimension(170, 180));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(assetNameLabel, org.openide.util.NbBundle.getMessage(AssetPreviewWidget.class, "AssetPreviewWidget.assetNameLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(assetPreviewLabel, org.openide.util.NbBundle.getMessage(AssetPreviewWidget.class, "AssetPreviewWidget.assetPreviewLabel.text")); // NOI18N
        assetPreviewLabel.setPreferredSize(new java.awt.Dimension(150, 150));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(assetNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(assetPreviewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(assetPreviewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(assetNameLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        assetNameLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(AssetPreviewWidget.class, "AssetPreviewWidget.assetNameLabel.AccessibleContext.accessibleName")); // NOI18N
        assetPreviewLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(AssetPreviewWidget.class, "AssetPreviewWidget.assetPreviewLabel.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed

    }//GEN-LAST:event_formMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel assetNameLabel;
    private javax.swing.JLabel assetPreviewLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void sceneOpened(SceneRequest request) {
    }

    @Override
    public void sceneClosed(SceneRequest request) {
    }

    @Override
    public void previewCreated(PreviewRequest request) {
        if (request.getRequester() == this) {
            java.awt.EventQueue.invokeLater(() -> {
                assetPreviewLabel.setIcon(IconList.asset);
//                    invalidate();
                revalidate();
                repaint();
//                    updateUI();
            });
        }
    }

    @Override
    public String getAssetName() {
        return assetNameLabel.getText();
    }

    @Override
    public void setAssetName(String name) {
        assetNameLabel.setText(name);
    }
    
    public void setEditable(boolean editable) {
        this.editable = editable;
    }
    
    public boolean isEditable() {
        return editable;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        switch(e.getActionCommand()) {
            case "Refresh":
                listener.refreshPreview(this);
                break;
            case "Delete":
                
                break;
        }
    }

}
